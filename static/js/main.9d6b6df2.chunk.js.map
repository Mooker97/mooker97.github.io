{"version":3,"sources":["components/Header.js","components/SelectorBtn.js","components/Selector.js","components/Opinion.js","components/InfoCard.js","components/LiveFeed.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","title","subtitle","defaultProps","updateClass","bool","SelectorBtn","btnClass","state","onClick","Selector","changeSelection","Opinion","useState","infoState","setInfoState","opinion","moreInfoClass","InfoCard","timer","negative","Math","abs","floor","translateTime","jumpsIn","category","number","length","weather","country","LiveFeed","raceInfoArray","map","index","refreshFeed","venue","race_number","distance","race_comment","start","race_id","Main","emptyWarning","setState","intervalId","refreshTimer","fetchRaces","a","fetch","res","json","data","App","raceState","setRaceState","selectorState","setSelector","translateNeds","nedsinfo","raceArray","currentSelection","forEach","Object","entries","race_summaries","id","race","raceInfo","advertised_start","seconds","Date","now","category_id","race_name","race_form","venue_country","venue_state","venue_name","meeting","meeting_name","push","sort","b","parseFloat","name","splice","filter","includes","getRaces","racesFromNeds","useEffect","clearInterval","setInterval","newRaceState","updateRaceState","currentState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d6b6df2.chunk.js","sourcesContent":["// import the strong types\r\nimport PropTypes from \"prop-types\";\r\n\r\n// the component is an object\r\nconst Header = (props) => {\r\n  // the return is what will be output to the dom\r\n  return (\r\n    <header className=\"flex flex-row\">\r\n      <h1 className=\"flex flex-col\">\r\n        <a>{props.title}</a>\r\n      </h1>\r\n      <div className=\"head-second flex flex-col\">\r\n        <p>{props.subtitle}</p>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\n// set the default values for props\r\nHeader.defaultProps = {\r\n  title: \"neds\",\r\n  subtitle: \"Live Racing Feed\",\r\n};\r\n\r\n// set the strong typing of the properties\r\n// first proptypes is lowercase\r\n// all others are upper\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\n// export the compnent so i can be iported\r\nexport default Header;\r\n","const SelectorBtn = (props) => {\r\n  let btnClass = updateClass(props.state);\r\n  return (\r\n    <button\r\n      className={btnClass}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.title}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst updateClass = (bool) => {\r\n  if (bool) {\r\n    return \"selector-on\"\r\n  } else {\r\n    return \"selector-off\"\r\n  }\r\n}\r\n\r\nexport default SelectorBtn;\r\n","import SelectorBtn from \"./SelectorBtn\";\r\n\r\nconst Selector = (props) => {\r\n  const dogClick = () => {\r\n    props.changeSelection(0);\r\n  };\r\n  const horseClick = () => {\r\n    props.changeSelection(1);\r\n  };\r\n  const charClick = () => {\r\n    props.changeSelection(2);\r\n  };\r\n\r\n  return (\r\n    <div className=\"selector flex flex-row\">\r\n      <SelectorBtn title=\"Dog\" state={props.state[0]} onClick={dogClick} />\r\n      <SelectorBtn title=\"Horse\" state={props.state[1]} onClick={horseClick} />\r\n      <SelectorBtn title=\"Chariet\" state={props.state[2]} onClick={charClick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","import { useState } from \"react\";\r\n\r\nconst Opinion = (props) => {\r\n  // set the component state for the more info section\r\n  const [infoState, setInfoState] = useState(true);\r\n\r\n  // toggle the more info section\r\n  const infoClicked = () => {\r\n    setInfoState(!infoState);\r\n  };\r\n\r\n  if (!props.opinion) {\r\n    return <p className=\"little-text\">No Expert Comment Available</p>;\r\n  }\r\n\r\n  let moreInfoClass = updateClass(infoState);\r\n  return (\r\n    <div>\r\n      <div className={moreInfoClass}>\r\n        <p className=\"opinion\">Epert Opinion</p>\r\n        <p className=\"quote\">{props.opinion}</p>\r\n      </div>\r\n      <button className=\"see-more\" onClick={infoClicked}>\r\n        {infoState ? \"See More\" : \"See Less\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst updateClass = (bool) => {\r\n  if (!bool) {\r\n    return \"more-info\";\r\n  } else {\r\n    return \"more-info hidden\";\r\n  }\r\n};\r\n\r\nexport default Opinion;\r\n","import Opinion from \"./Opinion\";\r\n\r\nconst InfoCard = (props) => {\r\n  // change time from seconds to mins / secs\r\n  const translateTime = (timer) => {\r\n    let negative = false;\r\n    if (timer < 0) {\r\n      negative = true;\r\n      timer = Math.abs(timer);\r\n    }\r\n    timer = [\r\n      Math.floor(timer / 3600),\r\n      Math.floor((timer % 3600) / 60),\r\n      timer % 60,\r\n    ];\r\n    if (negative) {\r\n      timer[0] = timer[0] * -1;\r\n      timer[1] = timer[1] * -1;\r\n      timer[2] = timer[2] * -1;\r\n    }\r\n    return timer;\r\n  };\r\n\r\n  let timer = translateTime(props.timer);\r\n  // console.log(props)\r\n  let jumpsIn = \"\";\r\n  if (timer[0]) {\r\n    jumpsIn = `${timer[0]}h ${timer[1]}m ${timer[2]}s`;\r\n  } else if (timer[1]) {\r\n    jumpsIn = `${timer[1]}m ${timer[2]}s`;\r\n  } else {\r\n    jumpsIn = `${timer[2]} Seconds`;\r\n  }\r\n  let category = props.category;\r\n\r\n  props.category == \"dog\"\r\n    ? (category = \"Greyhounds\")\r\n    : props.category == \"horse\"\r\n    ? (category = \"Horse\")\r\n    : (category = \"Harness\");\r\n\r\n  return (\r\n    <div className=\"info-card \">\r\n      <div className=\"flex flex-row info-bar\">\r\n        <div className=\"\">\r\n          <p className=\"race-title\">\r\n            {props.title} #{props.number}\r\n          </p>\r\n          <p className=\"countdown\">Jumps in: {jumpsIn}</p>\r\n          <p className=\"length\">{props.length}m</p>\r\n        </div>\r\n        <div className=\"text-right\">\r\n          <p>{category}</p>\r\n          <p>{props.weather}</p>\r\n          <p>{props.country + \" - \" + props.state}</p>\r\n        </div>\r\n      </div>\r\n      <Opinion opinion={props.opinion} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoCard;\r\n","import InfoCard from \"./InfoCard\";\r\n\r\n\r\nconst LiveFeed = (props) => {\r\n  let raceInfoArray = props.state;\r\n\r\n  return (\r\n    <div className=\"live-feed flex flex-col\">\r\n      {raceInfoArray.map((index) => (\r\n        <InfoCard\r\n          key={index.race_id}\r\n          refreshFeed={props.refreshFeed}\r\n          title={index.venue}\r\n          number={index.race_number}\r\n          category={index.category}\r\n          length={index.distance}\r\n          opinion={index.race_comment}\r\n          weather={index.weather}\r\n          country={index.country}\r\n          timer={index.start}\r\n          state={index.state}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveFeed;","import Selector from \"./Selector\";\r\nimport LiveFeed from \"./LiveFeed\";\r\n\r\nconst Main = (props) => {\r\n  let emptyWarning = \"\";\r\n\r\n  if (props.state[0].length < 1) {\r\n    if (!props.state[1][0] && !props.state[1][1] && !props.state[1][2]) {\r\n      emptyWarning = \"Filtering out all categories\";\r\n    } else {\r\n      emptyWarning = \"Please Disable CORS for the api to function\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className=\"flex flex-col\">\r\n      <Selector\r\n        state={props.state[1]}\r\n        changeSelection={props.changeSelection}\r\n      />\r\n      <p>\r\n      {emptyWarning}\r\n      </p>\r\n      <LiveFeed\r\n        state={props.state[0]}\r\n        refreshFeed={props.refreshFeed}\r\n        setState={props.setState}\r\n      />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;","import { useState, useEffect } from \"react\";\n\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nimport \"./css/main.css\";\n\n// set the constant params (settings)\n// after how many seconds will a new api call be made\nconst refreshRate = 300;\n// how long after a race jumps should it be removed and an api call made\nconst expiredAmount = -30;\n// api request count\nconst requestedCount = 45;\n\n// initiate variables\nlet intervalId = \"\";\nlet refreshTimer = 0;\n\n// main component function\nfunction App() {\n  const [raceState, setRaceState] = useState([]);\n  const [selectorState, setSelector] = useState([true, true, true]);\n\n  // interprets api response into helpful array\n  // including filtering for category\n  const translateNeds = (nedsinfo) => {\n    let raceArray = [];\n    let currentSelection = [\"dog\", \"horse\", \"chariot\"];\n    currentSelection.forEach((category, index) => {\n      if (!selectorState[index]) {\n        currentSelection[index] = \"\";\n      }\n    });\n\n    // take the race summaries and turn them to an array of races\n    for (const [id, race] of Object.entries(nedsinfo.data.race_summaries)) {\n      let raceInfo = {\n        race_id: id,\n        start: race.advertised_start.seconds - Math.floor(Date.now() / 1000),\n        category: race.category_id,\n        race_name: race.race_name,\n        race_number: race.race_number,\n        distance: race.race_form.distance,\n        race_comment: race.race_form.race_comment,\n        weather: race.race_form.weather,\n        country: race.venue_country,\n        state: race.venue_state,\n        venue: race.venue_name,\n        meeting: race.meeting_name,\n      };\n      raceArray.push(raceInfo);\n    }\n    raceArray.sort((a, b) => parseFloat(a.start) - parseFloat(b.start));\n    raceArray.forEach((race, index) => {\n      race.weather\n        ? (race.weather = race.weather.name)\n        : (race.weather = \"UNKWN\");\n\n      race.category === \"9daef0d7-bf3c-4f50-921d-8e818c60fe61\"\n        ? (race.category = \"dog\")\n        : race.category === \"4a2788f8-e825-4d36-9894-efd4baf1cfae\"\n        ? (race.category = \"horse\")\n        : (race.category = \"chariot\");\n\n      if (race.start <= expiredAmount) {\n        raceArray.splice(index, 1);\n      }\n    });\n\n    raceArray = raceArray.filter((race) =>\n      currentSelection.includes(race.category)\n    );\n    // console.log(raceArray);\n    return raceArray;\n  };\n\n  // get the races in the form of a translated array\n  const getRaces = async () => {\n    const racesFromNeds = await fetchRaces();\n    const raceArray = translateNeds(racesFromNeds);\n    setRaceState(raceArray);\n    refreshTimer = 0;\n  };\n\n  // update the selectors\n  const changeSelection = (index) => {\n    let currentState = selectorState;\n    currentState[index] = !currentState[index];\n    setSelector(currentState);\n    getRaces();\n  };\n\n  // update the times in the state without making an api call\n  const updateRaceState = () => {\n    if (raceState.length === 0) {\n      return;\n    }\n    let newRaceState = raceState;\n    newRaceState.forEach((race) => {\n      race.start = race.start - 1;\n      if (race.start <= expiredAmount) {\n        getRaces();\n        return;\n      }\n    });\n    refreshTimer++;\n    if (refreshTimer >= refreshRate) {\n      getRaces();\n      refreshTimer = 0;\n      clearInterval(intervalId);\n      return;\n    }\n    // for whatever reason these dots fix it\n    setRaceState([...newRaceState]);\n  };\n\n  // on load get the races\n  useEffect(() => {\n    getRaces();\n  }, []);\n\n  clearInterval(intervalId);\n  intervalId = setInterval(() => {\n    updateRaceState();\n  }, 1000);\n  // console.log(\"Rendering....\");\n\n  // output of the app component\n  return (\n    <div className=\"App\">\n      <Header subtitle=\"Not really neds\" />\n      <Main\n        state={[raceState, selectorState]}\n        changeSelection={changeSelection}\n        refreshFeed={getRaces}\n        setState={setRaceState}\n      />\n    </div>\n  );\n}\n\n// a function that fetches from the api and returns an object\nconst fetchRaces = async () => {\n  const res = await fetch(\n    \"https://api.neds.com.au/rest/v1/racing/?method=nextraces&count=\" +\n      requestedCount\n  );\n  const data = await res.json();\n  // console.log(data);\n  return data;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}